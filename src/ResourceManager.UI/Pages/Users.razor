@page "/users"
@using MudBlazor
@using ResourceManager.UI.Services.Interfaces
@using ResourceManager.Application.Users.GetUser
@using ResourceManager.Application.Users.GetUsers
@inject IUserService _userService

<MudContainer>
    <MudGrid>
        <MudItem xs="12">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h5">User List</MudText>
                    <MudTable Items="@users" Hover="true">
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            <MudTh>Username</MudTh>
                            <MudTh>Actor</MudTh>
                            <MudTh>Level</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@context.Name</MudTd>
                            <MudTd>@context.Username</MudTd>
                            <MudTd>@context.Actor.ToString()</MudTd> <!-- Convert enum to string -->
                            <MudTd>@context.Level.ToString()</MudTd> <!-- Convert enum to string -->
                            <MudTd>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => FetchUserDetails(context.Id))">
                                    View Details
                                </MudButton>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    @if (selectedUser != null)
    {
        <MudDivider />
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h6">User Details</MudText>
                <MudText>Name: @selectedUser.Name</MudText>
                <MudText>Username: @selectedUser.Username</MudText>
                <MudText>Actor: @selectedUser.Actor.ToString()</MudText> <!-- Convert enum to string -->
                <MudText>Level: @selectedUser.Level.ToString()</MudText> <!-- Convert enum to string -->
            </MudCardContent>
        </MudCard>
    }
</MudContainer>

@code {
    private List<UserResponse> users = new();
    private UserResponse? selectedUser;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            users = (await _userService.GetUsers()) ?? new List<UserResponse>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
        }
    }

    private async Task FetchUserDetails(Guid userId)
    {
        try
        {
            selectedUser = await _userService.GetUser(userId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching user details: {ex.Message}");
        }
    }
}
