@page "/document/{DocumentId:guid}"
@page "/document/{DocumentId:guid}/users/{UserId:guid}"
@using ResourceManager.Application.Documents.GetDocument
@using ResourceManager.Application.Documents.Reject
@using ResourceManager.Application.Users.GetUser
@using ResourceManager.Application.Workflows.Create
@using ResourceManager.Application.Workflows.GetById
@using ResourceManager.Domain.Documents
@using ResourceManager.Domain.Users
@using ResourceManager.UI.Services.Interfaces
@inject IDialogService DialogService
@inject IDocumentService _documentService
@inject IUserService _userService
@inject NavigationManager _navigationManager
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Medium" Class="mx-auto my-4">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.ArrowBack" OnClick="GoBack">
        Back to Documents
    </MudButton>

    <MudPaper Class="pa-4" Elevation="4">
        <!-- Header inside MudPaper for Document Details and Show Workflows button -->
        <MudGrid>
            <MudItem xs="6">
                <MudText Typo="Typo.h6" Color="Color.Primary">Document Details</MudText>
            </MudItem>
            <MudItem xs="6">
                <MudGrid Justify="Justify.FlexEnd">
                    @if (selectedUser?.Actor == Actor.Provider && selectedUser?.Id == document.CreatorId)
                    {
                        <MudItem xs="12" sm="4">
                            <MudSelect T="Level" @bind-Value="selectedLevel">
                                @foreach (var level in Enum.GetValues(typeof(Level)))
                                {
                                    <MudSelectItem T="Level" Value="(Level)level">@level.ToString()</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>

                        <MudItem xs="12" sm="4">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@(async () => await AddWorkflow())">
                                Add Workflow
                            </MudButton>
                        </MudItem>
                    }
                        <MudItem>
                            <MudButton Color="Color.Primary" Variant="Variant.Filled"
                                       StartIcon="@Icons.Material.Filled.History"
                                       OnClick="OpenWorkflowsDialog">
                                Show Workflows
                            </MudButton>
                        </MudItem>
                </MudGrid>
            </MudItem>
        </MudGrid>

        @if (isLoading)
        {
            <MudText Typo="Typo.h6" Align="Align.Center">
                <MudProgressCircular Indeterminate Color="Color.Primary" Class="mr-2" /> Loading document...
            </MudText>
        }
        else if (document == null)
        {
            <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Error">
                <MudIcon Icon="@Icons.Material.Filled.ErrorOutline" Color="Color.Error" Class="mr-2" /> Document not found.
            </MudText>
        }
        else
        {
            <MudGrid>
                <MudItem xs="12" sm="4">
                    <MudText Typo="Typo.subtitle1" Color="Color.Primary">Document Title:</MudText>
                </MudItem>
                <MudItem xs="12" sm="8">
                    <MudText Typo="Typo.body1">@document.Title</MudText>
                </MudItem>

                <MudItem xs="12" sm="4">
                    <MudText Typo="Typo.subtitle1" Color="Color.Primary">Content:</MudText>
                </MudItem>
                <MudItem xs="12" sm="8">
                    <MudText Typo="Typo.body1" Class="mb-3">@document.Content</MudText>
                </MudItem>

                <MudItem xs="12" sm="4">
                    <MudText Typo="Typo.subtitle1" Color="Color.Primary">Status:</MudText>
                </MudItem>
                <MudItem xs="12" sm="8">
                    <MudText Typo="Typo.body1">@document.Status</MudText>
                </MudItem>

                <MudItem xs="12" sm="4">
                    <MudText Typo="Typo.subtitle1" Color="Color.Primary">Created At:</MudText>
                </MudItem>
                <MudItem xs="12" sm="8">
                    <MudText Typo="Typo.body1">@document.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")</MudText>
                </MudItem>

                <MudItem xs="12" sm="4">
                    <MudText Typo="Typo.subtitle1" Color="Color.Primary">Updated At:</MudText>
                </MudItem>
                <MudItem xs="12" sm="8">
                    <MudText Typo="Typo.body1">@document.UpdatedAt?.ToString("yyyy-MM-dd HH:mm:ss")</MudText>
                </MudItem>
            </MudGrid>

            <MudDivider Class="my-4" />

            <MudGrid>
                @if (selectedUser?.Actor == Actor.Provider && selectedUser?.Id == document.CreatorId)
                {
                    <MudItem xs="12" sm="4">
                        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Edit" OnClick="@(async () => await UpdateDocumentDialog(DocumentId))">
                            Edit Document
                        </MudButton>
                    </MudItem>
                    <MudItem xs="12" sm="4">
                        <MudButton Variant="Variant.Outlined" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="@(async () => await DeleteDocument(DocumentId))" Class="ml-2">
                            Delete Document
                        </MudButton>
                    </MudItem>
                    <MudItem xs="12" sm="4">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Send" OnClick="SubmitForApproval">
                            Submit for Approval
                        </MudButton>
                    </MudItem>
                }
                else if (selectedUser?.Actor == Actor.Approver)
                {
                    <MudItem xs="12" sm="4">
                        <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Check"
                                   OnClick="@(async () => { if (selectedWorkflow != null) await ApproveDocument(selectedWorkflow.WorkflowId); })"
                                   Class="ml-2">
                            Approve Document
                        </MudButton>

                    </MudItem>
                    <MudItem xs="12" sm="4">
                        <MudTextField @bind-Value="rejectionReason" Label="Rejection Reason" Variant="Variant.Filled" Color="Color.Error" Required="true" />
                        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Close" OnClick="@(async () => { if (selectedWorkflow != null) await RejectDocument(selectedWorkflow.WorkflowId); })" Disabled="@string.IsNullOrWhiteSpace(rejectionReason)" Class="ml-2">
                            Reject Document
                        </MudButton>
                    </MudItem>
                }
            </MudGrid>
        }
    </MudPaper>
</MudContainer>




@code {
    [Parameter] public Guid DocumentId { get; set; }
    [Parameter] public Guid? UserId { get; set; } // Passed from the previous page
    private DocumentResponse? document;
    public UserResponse? selectedUser;
    private IEnumerable<WorkflowResponse> _workflows = new List<WorkflowResponse>();
    public WorkflowResponse? selectedWorkflow;
    private bool isLoading = true;
    private bool isSubmitting = false;
    private bool isApproving = false;
    private bool isRejecting = false;
    private string rejectionReason = string.Empty; // Input field binding
    private Level selectedLevel = Level.Reviewer;

    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;
        try
        {
            if (UserId.HasValue)
                selectedUser = await _userService.GetUser(UserId.Value);

            document = await _documentService.GetDocument(DocumentId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading document: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SubmitForApproval()
    {
        isSubmitting = true;
        try
        {
            if (UserId.HasValue)
            {
                var result = await _documentService.SubmitForApproval(DocumentId, UserId.Value);
                if (result)
                {
                    Snackbar.Add("Document submitted for approval successfully.", Severity.Success);
                    await OnParametersSetAsync(); // Reload the document
                }
                else
                {
                    Snackbar.Add("Failed to submit document for approval.", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error submitting document for approval: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task ApproveDocument(Guid workflowId)
    {
        _workflows = await _documentService.GetWorkflows(DocumentId);

        selectedWorkflow = _workflows.FirstOrDefault(x => x.WorkflowId == workflowId);

        isApproving = true;
        try
        {
            if (UserId.HasValue)
            {
                var result = await _documentService.ApproveDocument(DocumentId, UserId.Value, selectedWorkflow.WorkflowId);
                if (result)
                {
                    Snackbar.Add("Document approved successfully.", Severity.Success);
                    await OnParametersSetAsync(); // Reload the document
                }
                else
                {
                    Snackbar.Add("Failed to approve document.", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error approving document: {ex.Message}", Severity.Error);
        }
        finally
        {
            isApproving = false;
        }
    }

    private async Task RejectDocument(Guid workflowId)
    {
        _workflows = await _documentService.GetWorkflows(DocumentId);

        selectedWorkflow = _workflows.FirstOrDefault(x => x.WorkflowId == workflowId);

        isRejecting = true;
        try
        {
            if (UserId.HasValue)
            {
                var rejectRequest = new RejectDocumentRequest(rejectionReason);
                var result = await _documentService.RejectDocument(DocumentId, UserId.Value, selectedWorkflow.WorkflowId, rejectRequest);
                if (result)
                {
                    Snackbar.Add("Document rejected successfully.", Severity.Success);
                    GoBack(); // Reload the document
                }
                else
                {
                    Snackbar.Add("Failed to reject document.", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error rejecting document: {ex.Message}", Severity.Error);
        }
        finally
        {
            isRejecting = false;
        }
    }

    private void GoBack()
    {
        _navigationManager.NavigateTo("/documents");
    }

    private async Task DeleteDocument(Guid documentId)
    {
        var confirmed = await DialogService.ShowMessageBox(
            "Delete Document",
            "Are you sure you want to delete this document?",
            yesText: "Delete", cancelText: "Cancel");

        if (confirmed == true)
        {
            var success = await _documentService.DeleteDocument(documentId);
            if (success)
            {
                GoBack();
            }
        }
    }

    private async Task UpdateDocumentDialog(Guid documentId)
    {
        var parameters = new DialogParameters
        {
            { "DocumentId", documentId }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<UpdateDocumentDialog>("Update Document", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled && result.Data is bool updateSuccess && updateSuccess)
        {
            // Refresh the document list after successful update
            await OnParametersSetAsync();
        }
    }

    private async Task OpenWorkflowsDialog()
    {
        var parameters = new DialogParameters
        {
            { "DocumentId", DocumentId }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        DialogService.Show<WorkflowsDialog>("Workflows", parameters, options);
    }

    private async Task AddWorkflow()
    {
        if (selectedLevel == null) // Add a check for safety
        {
            Snackbar.Add("Please select a level before adding a workflow.", Severity.Warning);
            return;
        }

        var workflowRequest = new WorkflowRequest(selectedLevel);
        var result = await _documentService.AddWorkflow(DocumentId, workflowRequest);
        if (result)
        {
            Snackbar.Add("Workflow added successfully.", Severity.Success);
            await OnParametersSetAsync(); // Reload document details after adding workflow
        }
        else
        {
            Snackbar.Add("Failed to add workflow.", Severity.Error);
        }
    }

}
