@using ResourceManager.Application.Documents.CreateDocument
@using ResourceManager.Application.Documents.GetDocuments
@using ResourceManager.UI.Services.Interfaces
@inject IDocumentService _documentService;

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h5">Add New Document</MudText>
        <MudTextField Label="Title" @bind-Value="newDocumentTitle" Required="true" />
        <MudTextField Label="Content" @bind-Value="newDocumentContent" Required="true" Multiline="true" Rows="4" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddDocument">Add</MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="CloseDialog">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public Guid UserId { get; set; } // Receive UserId from parent
    [Parameter] public EventCallback<DocumentResponse> OnDocumentAdded { get; set; }
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    private string newDocumentTitle = string.Empty;
    private string newDocumentContent = string.Empty;

    private async Task AddDocument()
    {
        // Create a new document request with the title and content
        var newDocument = new CreateDocumentRequest(newDocumentTitle, newDocumentContent);
        var result = await _documentService.AddDocument(UserId, newDocument); // Use the passed UserId

        if (result != null)
        {
            // Emit event to notify parent that a document was added
            await OnDocumentAdded.InvokeAsync(result);
        }

        // Close the dialog
        await CloseDialog();
    }

    private async Task CloseDialog() => MudDialog.Cancel();
}
