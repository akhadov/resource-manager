@page "/documents"
@using ResourceManager.Application.Documents.CreateDocument
@using ResourceManager.Application.DocumentHistories.GetDocumentHistory
@using ResourceManager.Application.Documents.GetDocuments
@using ResourceManager.Application.Users.GetUser
@using ResourceManager.Domain.Documents
@using ResourceManager.Domain.Users
@using ResourceManager.UI.Services.Interfaces
@inject IDialogService DialogService
@inject NavigationManager _navigationManager
@inject IDocumentService _documentService
@inject IUserService _userService


@if (_users != null)
{
    <MudSelect T="Guid?" Label="Select User" Value="selectedUserId" ValueChanged="OnUserSelected">
        @foreach (var user in _users)
        {
            <MudSelectItem T="Guid?" Value="@user.Id">@user.Name @@@user.Username / @user.Actor / @user.Level</MudSelectItem>
        }
    </MudSelect>
}


@if (selectedUser != null)
{
    <MudText Typo="Typo.h6">Selected User: @selectedUser.Name (@selectedUser.Username)</MudText>
}

<MudText Typo="Typo.h3">Documents</MudText>

@if (selectedUser != null && selectedUser.Actor != Actor.Approver)
{
    <MudGrid>
        <MudItem xs="10">
        </MudItem>
        <MudItem xs="2">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddDocumentDialog">Add Document</MudButton>
        </MudItem>
    </MudGrid>
}


<MudTable Items="_documents" Hover="true" Bordered="true" Striped="true">
    <ColGroup>
        <col style="width:300px;" /> <!-- Username -->
        <col /> <!-- Title -->
        <col style="width:100px;" /> <!-- Status -->
        <col style="width:200px;" /> <!-- CreatedAt -->
        <col style="width:200px;" /> <!-- UpdatedAt -->
        <col style="width:150px;" /> <!-- Actions -->
    </ColGroup>
    <HeaderContent>
        <MudTh>Username</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Content</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>CreatedAt</MudTh>
        <MudTh>UpdatedAt</MudTh>
        <MudTh>CurrentLevel</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Username">@@@context.Username</MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Content">@context.Content</MudTd>
        <MudTd DataLabel="Status">@context.Status</MudTd>
        <MudTd DataLabel="CreatedAt">@context.CreatedAt</MudTd>
        <MudTd DataLabel="UpdatedAt">@context.UpdatedAt</MudTd>
        <MudTd DataLabel="CurrentLevel">@context.CurrentLevel</MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye" Size="Size.Small" OnClick="() => NavigateToDocumentPage(context)" Color="Color.Info" />

            @if (selectedUser != null && selectedUser.Actor != Actor.Approver && selectedUser.Id == context.CreatorId)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(async () => await UpdateDocumentDialog(context.Id))" Color="Color.Primary" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(async () => await DeleteDocument(context.Id))" Color="Color.Error" />
            }

            <MudIconButton Icon="@Icons.Material.Filled.History" Size="Size.Small" OnClick="@(async () => await ShowHistories(context.Id))" Color="Color.Default" />
        </MudTd>

    </RowTemplate>

    <ChildRowContent>
        @if (selectedDocumentId == context.Id && _histories != null)
        {
            <MudTr>
                <MudTd ColSpan="9">
                    <MudTable Items="_histories" Hover="true" Bordered="true">
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            <MudTh>Action</MudTh>
                            <MudTh>Type</MudTh>
                            <MudTh>CreatedAt</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="historyContext">
                            <MudTd DataLabel="Name">@historyContext.Name</MudTd>
                            <MudTd DataLabel="Action">@historyContext.Action</MudTd>
                            <MudTd DataLabel="Type">@historyContext.Type</MudTd>
                            <MudTd DataLabel="CreatedAt">@historyContext.CreatedAt</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudTd>
            </MudTr>
        }
    </ChildRowContent>
</MudTable>

@code {
    private IEnumerable<DocumentResponse>? _documents { get; set; } = new List<DocumentResponse>();
    private IEnumerable<HistoryResponse>? _histories { get; set; } = new List<HistoryResponse>();
    private List<UserResponse>? _users { get; set; }

    private Guid? selectedDocumentId;
    public Guid? selectedUserId;
    public UserResponse? selectedUser;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
        await LoadDocuments();
    }

    // private async Task LoadDocuments()
    // {
    //     _documents = await _documentService.GetDocuments();

    //     if (selectedUser != null && selectedUser.Actor == Actor.Approver)
    //     {
    //         // Filter out documents with status 'Draft' if the user is an approver
    //         _documents = _documents?.Where(doc => doc.Status != DocumentStatus.Draft && doc.Status != DocumentStatus.Rejected);
    //     }
    // }

    private async Task LoadDocuments()
    {
        // Fetch all documents
        var allDocuments = await _documentService.GetDocuments();

        // Initialize filtered documents as an empty list
        var filteredDocuments = new List<DocumentResponse>();

        if (allDocuments != null)
        {
            // Loop through each document
            foreach (var document in allDocuments)
            {
                // Check if the current user is the document author (creator)
                var isAuthor = selectedUser != null && selectedUser.Id == document.CreatorId;

                // Get the workflows for the current document
                var workflows = await _documentService.GetWorkflows(document.Id);

                // Variable to check if the document should be shown to the current user
                bool shouldShowDocument = false;

                if (isAuthor)
                {
                    // If the user is the author, they should see all documents they created
                    shouldShowDocument = true;
                }
                else if (workflows != null)
                {
                    // Condition 1: Check if there's a workflow with IsChecked == false and matching the user level
                    var firstUncheckedWorkflow = workflows.FirstOrDefault(workflow => !workflow.IsChecked);

                    // Condition 2: Check if there's any workflow with IsChecked == true and IsApproved == true
                    var approvedAndCheckedWorkflow = workflows.Any(workflow => workflow.IsChecked && workflow.IsApproved);

                    if (firstUncheckedWorkflow != null && selectedUser.Level == firstUncheckedWorkflow.ApproverLevel)
                    {
                        // Show the document only to the user whose level matches the workflow approval level
                        shouldShowDocument = true;
                    }
                    else if (approvedAndCheckedWorkflow)
                    {
                        // Show the document to all users if it's both checked and approved
                        shouldShowDocument = true;
                    }
                }

                // Add the document to the filtered list if the conditions are met
                if (shouldShowDocument)
                {
                    filteredDocuments.Add(document);
                }
            }

            // Approver-specific filtering
            if (selectedUser != null && selectedUser.Actor == Actor.Approver)
            {
                // Filter out documents with status 'Draft' or 'Rejected' for approvers
                filteredDocuments = filteredDocuments
                    .Where(doc => doc.Status != DocumentStatus.Draft && doc.Status != DocumentStatus.Rejected)
                    .ToList();
            }

            // Update the document list with the filtered results
            _documents = filteredDocuments;
        }

        // Ensure the UI is updated
        StateHasChanged();
    }





    private async Task LoadUsers()
    {
        _users = await _userService.GetUsers();
        StateHasChanged();
    }

    private async Task OnUserSelected(Guid? userId)
    {
        selectedUserId = userId;
        if (selectedUserId.HasValue)
        {
            selectedUser = await _userService.GetUser(selectedUserId.Value);
            await LoadDocuments();
        }
    }

    private async Task AddDocumentDialog()
    {
        if (!selectedUserId.HasValue)
        {
            await DialogService.ShowMessageBox(
                "Add Document",
                "Please choose a user before adding a document.",
                yesText: "OK"
            );
            return;
        }

        var parameters = new DialogParameters
        {
            { "UserId", selectedUserId }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<AddDocumentDialog>("Add Document", parameters, options);

        var result = await dialog.Result;
        
        if (!result.Canceled && result.Data is bool updateSuccess && updateSuccess)
        {
            // Refresh the document list after successful update
            await LoadDocuments();
        }
    }

    private async Task UpdateDocumentDialog(Guid documentId)
    {
        var parameters = new DialogParameters
        {
            { "DocumentId", documentId }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<UpdateDocumentDialog>("Update Document", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled && result.Data is bool updateSuccess && updateSuccess)
        {
            // Refresh the document list after successful update
            await LoadDocuments();
        }
    }


    private async Task ShowHistories(Guid documentId)
    {
        if (selectedDocumentId == documentId)
        {
            selectedDocumentId = null;
            _histories = null;
        }
        else
        {
            selectedDocumentId = documentId;
            _histories = await _documentService.GetHistories(documentId);
        }
    }

    private async Task DeleteDocument(Guid documentId)
    {
        var confirmed = await DialogService.ShowMessageBox(
            "Delete Document",
            "Are you sure you want to delete this document?",
            yesText: "Delete", cancelText: "Cancel");

        if (confirmed == true)
        {
            var success = await _documentService.DeleteDocument(documentId);
            if (success)
            {
                await LoadDocuments();
            }
        }
    }

    private void NavigateToDocumentPage(DocumentResponse document)
    {
        if (selectedUserId.HasValue)
        {
            _navigationManager.NavigateTo($"/document/{document.Id}/users/{selectedUser.Id}");
        }
        else
        {
            _navigationManager.NavigateTo($"/document/{document.Id}");
        }
    }
}
