@page "/documents"
@using ResourceManager.Application.Documents.CreateDocument
@using ResourceManager.Application.DocumentHistories.GetDocumentHistory
@using ResourceManager.Application.Documents.GetDocuments
@using ResourceManager.UI.Services.Interfaces
@inject IDocumentService _documentService

<MudText Typo="Typo.h3">Documents</MudText>

<!-- Add Document Button (top right) -->
<MudGrid>
    <MudItem xs="10">
        <!-- Placeholder for title or filters if needed -->
    </MudItem>
    <MudItem xs="2">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ShowAddDocumentDialog">Add Document</MudButton>
    </MudItem>
</MudGrid>

<!-- Documents Table -->
<MudTable Items="_documents" Hover="true" Bordered="true" Striped="true">
    <ColGroup>
        <col style="width:300px;" /> <!-- Username -->
        <col /> <!-- Title -->
        <col style="width:100px;" /> <!-- Status -->
        <col style="width:200px;" /> <!-- CreatedAt -->
        <col style="width:200px;" /> <!-- UpdatedAt -->
        <col style="width:150px;" /> <!-- Actions -->
    </ColGroup>
    <HeaderContent>
        <MudTh>Username</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Content</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>CreatedAt</MudTh>
        <MudTh>UpdatedAt</MudTh>
        <MudTh>CurrentLevel</MudTh>
        <MudTh>NextLevel</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Username">@context.Username</MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Content">@context.Content</MudTd>
        <MudTd DataLabel="Status">@context.Status</MudTd>
        <MudTd DataLabel="CreatedAt">@context.CreatedAt</MudTd>
        <MudTd DataLabel="UpdatedAt">@context.UpdatedAt</MudTd>
        <MudTd DataLabel="CurrentLevel">@context.CurrentLevel</MudTd>
        <MudTd DataLabel="NextLevel">@context.NextLevel</MudTd>
        <MudTd>
            <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(async () => await ShowHistories(context.Id))">
                @(selectedDocumentId == context.Id ? "Hide" : "Show") History
            </MudButton>
        </MudTd> <!-- Action button -->
    </RowTemplate>

    <!-- Display History under the selected document -->
    <ChildRowContent>
        @if (selectedDocumentId == context.Id && _histories != null)
        {
            <MudTr>
                <MudTd ColSpan="9">
                    <MudTable Items="_histories" Hover="true" Bordered="true">
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            <MudTh>Action</MudTh>
                            <MudTh>Type</MudTh>
                            <MudTh>CreatedAt</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="historyContext">
                            <MudTd DataLabel="Name">@historyContext.Name</MudTd>
                            <MudTd DataLabel="Action">@historyContext.Action</MudTd>
                            <MudTd DataLabel="Type">@historyContext.Type</MudTd>
                            <MudTd DataLabel="CreatedAt">@historyContext.CreatedAt</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudTd>
            </MudTr>
        }
    </ChildRowContent>
</MudTable>

<!-- Include the AddDocumentDialog component -->
<AddDocumentDialog IsVisible="@isAddDocumentDialogVisible" OnDocumentAdded="OnDocumentAdded" IsVisibleChanged="@(val => isAddDocumentDialogVisible = val)" />

@code {
    private IEnumerable<DocumentResponse>? _documents { get; set; } = new List<DocumentResponse>();
    private IEnumerable<HistoryResponse>? _histories { get; set; } = new List<HistoryResponse>();
    private bool isAddDocumentDialogVisible = false;
    private Guid? selectedDocumentId;

    protected override async Task OnInitializedAsync()
    {
        await LoadDocuments();
    }

    private async Task LoadDocuments()
    {
        _documents = await _documentService.GetDocuments();
    }

    // Show the add document dialog
    private void ShowAddDocumentDialog()
    {
        isAddDocumentDialogVisible = true;
    }

    // Called when a new document is added
    private async Task OnDocumentAdded(DocumentResponse newDocument)
    {
        await LoadDocuments();
        isAddDocumentDialogVisible = false;
    }

    // Show the history for a selected document
    private async Task ShowHistories(Guid documentId)
    {
        if (selectedDocumentId == documentId)
        {
            // Hide history if same document is clicked again
            selectedDocumentId = null;
            _histories = null;
        }
        else
        {
            selectedDocumentId = documentId;
            _histories = await _documentService.GetHistories(documentId);
        }
    }
}
